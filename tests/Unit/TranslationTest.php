<?php

namespace Kodilab\LaravelI18n\Tests\Unit;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Kodilab\LaravelI18n\Models\Locale;
use Kodilab\LaravelI18n\Models\Translation;
use Kodilab\LaravelI18n\Tests\TestCase;

class TranslationTest extends TestCase
{
    /** @var Translation */
    protected $translation;

    /** @var Locale */
    protected $locale;

    /** @var Locale */
    protected $fallback_locale;

    use RefreshDatabase;
    use WithFaker;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //For some reason, RefreshDatabase trait isn't working as expected in MySQL. So we remove all locales manually.
        Translation::all()->each(function ($item) {
            $item->delete();
        });

        DB::table(config('i18n.tables.locales'))->delete();

        $this->fallback_locale = factory(Locale::class)->create([
            'fallback' => true,
            'enabled' => true
        ]);

        $this->locale = factory(Locale::class)->create([
            'enabled' => true
        ]);

        $this->translation = factory(Translation::class)->create(['locale_id' => $this->locale->id]);
    }

    public function test_exists_translations_returns_whether_a_translation_exists()
    {
        $this->assertFalse(Translation::existsTranslation(md5($this->faker->text), $this->locale));
        $this->assertTrue(Translation::existsTranslation(md5($this->translation->translation), $this->locale));
    }

    public function test_generate_fallback_locale_returns_the_translation_if_exists()
    {
        $translation_in_fallback_locale = factory(Translation::class)->create([
           'locale_id' => $this->fallback_locale->id
        ]);

        $new_translation = Translation::generateFallbackTranslationOrGetExistent($translation_in_fallback_locale->translation);

        $this->assertEquals($translation_in_fallback_locale->id, $new_translation->id);
    }

    public function test_generate_fallback_locale_returns_a_new_translation_if_not_exists()
    {
        $text = $this->faker->text;

        $new_translation = Translation::generateFallbackTranslationOrGetExistent($text);

        $this->assertNotNull($new_translation->id);

        $translation = Translation::find($new_translation->id);

        $this->assertEquals($translation->translation, $text);
    }

    public function test_if_a_translation_does_not_exists_a_fallback_translation_is_created()
    {
        $text = $this->faker->text;

        $this->assertFalse(Translation::existsTranslation(md5($text), $this->locale));
        $this->assertFalse(Translation::existsTranslation(md5($text), $this->fallback_locale));

        Translation::getTextTranslation($text, $this->locale);

        $this->assertFalse(Translation::existsTranslation(md5($text), $this->locale));
        $this->assertTrue(Translation::existsTranslation(md5($text), $this->fallback_locale));

    }
}
