<?php

namespace Kodilab\LaravelI18n\Tests\Unit;

use Illuminate\Filesystem\Filesystem;
use Illuminate\Foundation\Testing\WithFaker;
use Kodilab\LaravelI18n\Linguist;
use Kodilab\LaravelI18n\Tests\TestCase;

class LinguistTest extends TestCase
{
    use WithFaker;

    /** @var Linguist */
    protected $linguist;

    protected $filesystem;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->filesystem = $this->app->make(Filesystem::class);

        $this->linguist = new Linguist($this->filesystem, [$this->test_files_path]);


    }

    public function test_parsing_php_file_gets_translation_method_calls()
    {
        $filename = __FUNCTION__ . 'php';

        $this->generateTestFile($filename,
            "<? t('test :test', ['test' => 'test']); ?>");

        $result = $this->linguist->getAllTranslatableStringFromFiles();

        $this->assertArrayHasKey($filename, $result);

        $this->assertArraySubset(['0' => "test :test"], $result[$filename]);
    }

    public function test_group_translation_by_md5()
    {
        $texts = [
            "test :test",
            "test1 :test1",
            "test2 :test2"
        ];

        $translations = [
            "file_name1.php" => [
                0 => $texts[0],
                1 => $texts[1]
            ],

            "file_name2.php" => [
                0 => $texts[2],
                1 => $texts[0],
                2 => $texts[0]
            ]
        ];

        $result = $this->linguist->getTranslationsWithMd5($translations);

        $this->assertCount(3, $result);

        foreach ($texts as $text)
        {
            $this->assertArrayHasKey(md5($text), $result);
        }

        $this->assertCount(2, $result[md5('test :test')]['files']);

        $this->assertEquals(2, $result[md5('test :test')]['files']['file_name2.php']);
    }
}
