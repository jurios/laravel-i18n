<?php


namespace Kodilab\LaravelI18n\Tests\Unit\i18n\FileHandlers;


use Illuminate\Foundation\Testing\WithFaker;
use Kodilab\LaravelI18n\i18n\FileHandlers\PHPHandler;
use Kodilab\LaravelI18n\i18n\Translations\Translation;
use Kodilab\LaravelI18n\i18n\Translations\TranslationCollection;
use Kodilab\LaravelI18n\Support\Arr;
use Kodilab\LaravelI18n\Tests\TestCase;

class PHPHandlerTest extends TestCase
{
    use WithFaker;

    /**
     * @var string
     */
    protected $file;

    /**
     * @var string
     */
    protected $filename;

    /**
     * @var PHPHandler
     */
    protected $handler;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->file = resource_path('lang/en/validation.php');
        $this->filename = basename($this->file, '.php');
        $this->handler = new PHPHandler($this->file);
    }

    public function test_getTranslations_should_return_a_translation_collection()
    {
        $this->assertEquals(TranslationCollection::class, get_class($this->handler->getTranslations()));
    }

    public function test_getTranslations_should_return_the_translation_in_dot_format()
    {
        $multilevel_array = require $this->file;

        $collection = new TranslationCollection();
        foreach (Arr::dot($multilevel_array, $this->filename . '.') as $path => $translation) {
            if (is_string($translation)) {
                $collection->add(new Translation($path, $translation));
            }
        }

        $this->assertEquals(
            $collection,
            $this->handler->getTranslations()
        );
    }

    public function test_getTranslations_should_returns_empty_collection_when_the_file_does_not_exist()
    {
        $this->handler = new PHPHandler(resource_path('lang/en/'. $this->faker->word.'.php'));

        $this->assertEquals(
            new TranslationCollection(),
            $this->handler->getTranslations()
        );
    }
}