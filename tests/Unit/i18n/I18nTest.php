<?php


namespace Kodilab\LaravelI18n\Tests\Unit\i18n;


use Carbon\Carbon;
use Illuminate\Foundation\Testing\WithFaker;
use Kodilab\LaravelI18n\Facades\i18n;
use Kodilab\LaravelI18n\i18n\i18NManager;
use Kodilab\LaravelI18n\Models\Locale;
use Kodilab\LaravelI18n\Tests\TestCase;
use Kodilab\LaravelI18n\Tests\Traits\InstallPackage;

class I18nTest extends TestCase
{
    use WithFaker, InstallPackage;

    /**
     * @var i18NManager
     */
    protected $i18n;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->i18n = $this->app['i18n'];
    }

    public function test_fallback_locale_setting_is_updated_when_instance_i18n()
    {
        $this->assertEquals(Locale::getFallbackLocale()->reference, config('app.fallback_locale'));
    }

    public function test_locale_setting_is_not_changed_if_the_locale_exists()
    {
        $locale = Locale::getLocale(config('app.locale'));

        $this->assertEquals($locale->reference, config('app.locale'));
    }

    public function test_locale_setting_is_changed_to_fallback_if_the_locale_does_not_exist()
    {
        $this->assertEquals(Locale::getFallbackLocale()->reference, config('app.locale'));
    }

    public function test_setLocale_should_change_the_locale_setting()
    {
        $locale = factory(Locale::class)->create();

        $this->i18n->setLocale($locale);

        $this->assertEquals($locale->reference, config('app.locale'));
    }

    public function test_setLocale_should_change_the_carbon_locale()
    {
        $en = factory(Locale::class)->create([
            'carbon_locale' => 'en'
        ]);

        $es = factory(Locale::class)->create([
            'carbon_locale' => 'es'
        ]);

        $this->i18n->setLocale($en);

        $this->assertEquals('1 second ago', Carbon::now()->subSeconds(1)->diffForHumans());

        $this->i18n->setLocale($es);

        $this->assertEquals('hace 1 segundo', Carbon::now()->subSeconds(1)->diffForHumans());
    }

    public function test_setLocale_should_not_change_the_locale_setting_if_the_new_locale_does_not_exist()
    {
        $locale = factory(Locale::class)->make();

        $this->i18n->setLocale($locale);

        $this->assertNotEquals($locale->reference, config('app.locale'));
    }

    public function test_setFallbackLocale_should_change_the_fallback_locale_setting()
    {
        $locale = factory(Locale::class)->create();

        $this->i18n->setFallbackLocale($locale);

        $this->assertEquals($locale->reference, config('app.fallback_locale'));
    }

    public function test_setFallbackLocale_should_not_change_the_fallback_locale_setting_if_the_locale_does_not_exist()
    {
        $locale = factory(Locale::class)->make();

        $this->i18n->setFallbackLocale($locale);

        $this->assertNotEquals($locale->reference, config('app.fallback_locale'));
    }

    public function test_getLocale_should_return_the_loaded_locale()
    {
        $locale = factory(Locale::class)->create();

        $this->i18n->setLocale($locale);

        $this->assertTrue($locale->is($this->i18n->getLocale()));
    }

    public function test_getFallbackLocale_should_return_the_loaded_fallback_locale()
    {
        $locale = factory(Locale::class)->create();

        $this->i18n->setFallbackLocale($locale);

        $this->assertTrue($locale->is($this->i18n->getFallbackLocale()));
    }

    public function test_setTimezone_should_update_the_timezone_setting()
    {
        $locale = factory(Locale::class)->create();

        $this->i18n->setTimezone($locale->tz);

        $this->assertEquals($locale->tz, config('app.timezone'));
    }

    public function test_setTimezone_should_not_update_the_timezone_setting_if_it_is_not_a_valid_timezone()
    {
        $this->i18n->setTimezone($this->faker->word);

        $this->assertEquals('UTC', config('app.timezone'));
    }

    public function test_generateReference_should_generate_a_locale_reference()
    {
        $language = 'en';
        $region = 'GB';

        $this->assertEquals('en_GB', i18n::generateReference($language, $region));
        $this->assertEquals('en', i18n::generateReference($language));
        $this->assertEquals('en', i18n::generateReference(mb_strtoupper($language)));
        $this->assertEquals('en_GB', i18n::generateReference($language, mb_strtolower($region)));
    }

    public function test_isReferenceValid_should_return_true_if_the_reference_is_valid()
    {
        $this->assertTrue(i18n::isReferenceValid('en_GB'));
        $this->assertTrue(i18n::isReferenceValid('enn_GB'));
        $this->assertTrue(i18n::isReferenceValid('en_GBB'));
        $this->assertTrue(i18n::isReferenceValid('en'));

        $this->assertFalse(i18n::isReferenceValid('_GB'));
        $this->assertFalse(i18n::isReferenceValid('GB'));
        $this->assertFalse(i18n::isReferenceValid('gB'));

        $this->assertFalse(i18n::isReferenceValid('EN_gb'));
        $this->assertFalse(i18n::isReferenceValid('EN'));
        $this->assertFalse(i18n::isReferenceValid('en_gb'));
        $this->assertFalse(i18n::isReferenceValid('eenn_gb'));
    }

    public function test_getLanguage_should_return_the_language_from_a_reference()
    {
        $name = 'en_GB';

        $this->assertEquals('en', i18n::getLanguage($name));
    }

    public function test_getLanguage_with_an_invalid_reference_should_throw_an_exception()
    {
        $this->expectException(\InvalidArgumentException::class);
        $name = '_GB';

        i18n::getLanguage($name);
    }

    public function test_getRegion_should_return_the_region_from_a_reference()
    {
        $name = 'en_GB';
        $this->assertEquals('GB', i18n::getRegion($name));
    }

    public function test_getRegion_should_return_null_if_the_reference_does_not_have_a_region()
    {
        $name = 'en';
        $this->assertNull(i18n::getRegion($name));
    }

    public function test_getRegion_should_throw_an_exception_if_the_reference_is_not_valid()
    {
        $this->expectException(\InvalidArgumentException::class);

        i18n::getRegion('en_gb');
    }

    public function test_isValidTimezone_should_return_true_whether_the_timezone_is_valid()
    {
        $this->assertTrue(i18n::isTimezoneValid($this->faker->timezone));
        $this->assertTrue(i18n::isTimezoneValid('UTC'));
        $this->assertFalse(i18n::isTimezoneValid($this->faker->word));
        $this->assertFalse(i18n::isTimezoneValid(''));
    }
}