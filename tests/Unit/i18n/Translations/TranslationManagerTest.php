<?php


namespace Kodilab\LaravelI18n\Tests\Unit\i18n\Translations;


use Illuminate\Foundation\Testing\WithFaker;
use Kodilab\LaravelI18n\i18n\FileHandlers\JSONHandler;
use Kodilab\LaravelI18n\i18n\Translations\Translation;
use Kodilab\LaravelI18n\i18n\Translations\TranslationCollection;
use Kodilab\LaravelI18n\i18n\Translations\TranslationManager;
use Kodilab\LaravelI18n\Models\Locale;
use Kodilab\LaravelI18n\Tests\TestCase;

class TranslationManagerTest extends TestCase
{
    use WithFaker;

    /**
     * @var Locale
     */
    protected $locale;

    /**
     * @var TranslationManager
     */
    protected $manager;

    /**
     * @var JSONHandler
     */
    protected $handler;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->locale = factory(Locale::class)->create();

        //Generate JSON translations
        $this->artisan('i18n:sync')->run();

        $this->manager = new TranslationManager($this->locale);
        $this->handler = new JSONHandler(resource_path('lang/' . $this->locale->reference . '.json'));
    }

    public function test_translations_should_return_the_JSON_translations()
    {
        $this->assertEquals(
            $this->handler->getTranslations(),
            $this->manager->getTranslations()
        );
    }

    public function test_is_translated_should_return_true_if_the_path_is_listed_and_is_not_empty()
    {
        $translations = $this->handler->getTranslations();

        $path = $this->faker->unique()->word;
        $value = $this->faker->paragraph;

        $other_path = $this->faker->unique()->word;
        $other_value = '';

        $translations->add(new Translation($path, $value));
        $translations->add(new Translation($other_path, $other_value));

        $this->handler->save($translations);

        $this->manager->refresh();

        $this->assertTrue($this->manager->isTranslated($path));
        $this->assertFalse($this->manager->isTranslated($other_path));
    }

    public function test_getTranslation_should_return_the_translation()
    {
        $path = $this->faker->unique()->word;
        $value = $this->faker->paragraph;

        $this->handler->save(new TranslationCollection([new Translation($path, $value)]));
        $this->manager->refresh();

        $this->assertEquals(
            $value,
            $this->manager->getTranslation($path)
        );
    }

    public function test_setTranslation_should_update_a_translation()
    {
        $path = $this->faker->unique()->word;
        $value = $this->faker->paragraph;

        $this->handler->save(new TranslationCollection([new Translation($path, $this->faker->paragraph)]));
        $this->manager->refresh();

        $this->assertNotEquals(
            $value,
            $this->manager->getTranslation($path)
        );

        $this->manager->setTranslation($path, $value);

        $this->assertEquals(
            $value,
            $this->handler->getTranslations()->where('path', $path)->first()->translation
        );
    }
}