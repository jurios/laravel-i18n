<?php

namespace Kodilab\LaravelI18n\Tests\Unit;

use Kodilab\LaravelI18n\Exceptions\MissingLocaleException;
use Kodilab\LaravelI18n\Models\Locale;
use Kodilab\LaravelI18n\Tests\TestCase;

class LocaleTest extends TestCase
{
    /** @var Locale */
    protected $fallback_locale;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->fallback_locale = factory(Locale::class)->create([
            'fallback' => true,
            'enabled' => true
        ]);
    }

    public function test_throw_exception_when_fallback_locale_does_not_exist()
    {
        Locale::all()->each(function($item) {
            $item->delete();
        });

        $this->assertEquals(0, count(Locale::all()));

        $this->expectException(MissingLocaleException::class);

        Locale::getFallbackLocale();
    }

    public function test_fallback_locale_is_returned_when_get_fallback_locale_is_called()
    {
        $this->assertEquals($this->fallback_locale->id, Locale::getFallbackLocale()->id);
    }

    public function test_user_locale_is_returned_when_get_user_locale_is_called()
    {
        $user_locale = factory(Locale::class)->create([
            'enabled' => true
        ]);

        $this->session(['locale' => $user_locale]);

        $this->assertEquals($user_locale->id, Locale::getUserLocale()->id);
    }

    public function test_fallback_locale_is_returned_when_user_locale_is_not_defined()
    {
        $this->assertEquals($this->fallback_locale->id, Locale::getUserLocale()->id);
    }

    public function test_reference_is_returned()
    {
        $locale = factory(Locale::class)->create([
            'ISO_639_1' => 'AA',
            'region' => 'bb'
        ]);

        $this->assertEquals('aa_BB', $locale->reference);
    }

    public function test_null_carbon_locale_and_laravel_locale_are_persisted_same_iso_if_does_not_exist()
    {
        $locale = factory(Locale::class)->create([
            'carbon_locale' => 'BB',
            'laravel_locale' => 'AA'
        ]);

        $this->assertEquals('bb', $locale->carbon_locale);
        $this->assertEquals('aa', $locale->laravel_locale);

        $locale = factory(Locale::class)->create([
            'carbon_locale' => null,
            'laravel_locale' => null
        ]);

        $this->assertEquals($locale->ISO_639_1, $locale->carbon_locale);
        $this->assertEquals($locale->ISO_639_1, $locale->laravel_locale);
    }



}
