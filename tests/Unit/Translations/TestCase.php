<?php


namespace Kodilab\LaravelI18n\Tests\Unit\Translations;


use Illuminate\Foundation\Testing\WithFaker;
use Kodilab\LaravelI18n\Models\Locale;
use Kodilab\LaravelI18n\Support\Arr;

class TestCase extends \Kodilab\LaravelI18n\Tests\TestCase
{
    /** @var string */
    protected $lang_path;

    use WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->lang_path = $this->resources_path . DIRECTORY_SEPARATOR . 'lang';
        $this->createLangDirectory();
    }

    protected function tearDown(): void
    {
        $this->removeLangDirectory();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    private function createLangDirectory()
    {
        if (!is_dir($this->lang_path)) {
            $this->filesystem->makeDirectory($this->lang_path, 0755, true);
        }
    }

    private function removeLangDirectory()
    {
        if (is_dir($this->lang_path)) {
            $this->filesystem->deleteDirectory($this->lang_path);
        }
    }

    /**
     * Print translations in a file in JSON or Array format
     *
     * @param string $path
     * @param array $translations
     */
    protected function printTranslationFile(string $path, array $translations, string $format = 'json')
    {
        if ($format === 'json') {
            $content = json_encode($translations, JSON_PRETTY_PRINT);
        }
        else {
            $content = "<?php". PHP_EOL . PHP_EOL . "return " . Arr::toString($translations);
        }

        file_put_contents($path, $content);
    }

    /**
     * Add random raw translations to the file
     *
     * @param string $path
     * @param int $count
     */
    protected function fillFileWithRandomTranslations(string $path, int $count = 10, string $format = 'json')
    {
        $translations = [];

        for ($i = 0; $i < $count; $i ++) {
            $translations[$this->faker->unique()->paragraph] = $this->faker->paragraph;
        }

        $this->printTranslationFile($path, $translations, $format);
    }

    /**
     * Returns the json file path for the given locale
     *
     * @param Locale $locale
     * @return string
     */
    protected function getJSONPathFromLocale(Locale $locale)
    {
        return $this->lang_path . DIRECTORY_SEPARATOR . $locale->name . '.json';
    }
}