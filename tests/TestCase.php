<?php

namespace Kodilab\LaravelI18n\Tests;

use Illuminate\Encryption\Encrypter;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Schema;
use Kodilab\LaravelI18n\i18n\Translations\Translation;
use Kodilab\LaravelI18n\i18n\Translations\TranslationCollection;
use Kodilab\LaravelI18n\Models\Locale;
use Kodilab\LaravelI18n\Tests\Traits\InstallPackage;
use Kodilab\LaravelI18n\Tests\Traits\LaravelOperations;
use Kodilab\LaravelI18n\Tests\Traits\MigratePackage;

class TestCase extends \Orchestra\Testbench\TestCase
{
    use LaravelOperations;
    use RefreshDatabase;

    /** @var Filesystem */
    protected $filesystem;

    /** @var string */
    protected $resources_path = __DIR__ . DIRECTORY_SEPARATOR . 'resources';

    /** @var Locale */
    protected $fallback_locale;

    public function __construct($name = null, array $data = [], $dataName = '')
    {
        parent::__construct($name, $data, $dataName);

        $this->filesystem = new Filesystem();

        $this->removePublishedMigrations();
    }

    public function __destruct()
    {
        $this->removePublishedMigrations();
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Schema::defaultStringLength(191);

        $this->loadLaravelMigrations();

        $this->app['config']->set('app.key', 'base64:' . base64_encode(
            Encrypter::generateKey($this->app['config']->get('app.cipher'))
        ));

        $this->artisan('migrate')->run();
    }

    /**
     * Add custom Boot helper traits.
     *
     * @return array
     */
    protected function setUpTraits()
    {
        $uses = parent::setUpTraits();

        if (isset($uses[MigratePackage::class])) {
            $this->migratePackageSetUp();
        }

        if (isset($uses[InstallPackage::class])) {
            $this->installPackageSetUp();
        }

        return $uses;
    }

    protected function tearDown(): void
    {
        $this->removePublishedTranslations();
        $this->removePublishedFactories();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * Get application providers.
     *
     * @param  \Illuminate\Foundation\Application  $app
     *
     * @return array
     */
    protected function getPackageProviders($app)
    {
        return [
            \Kodilab\LaravelI18n\I18nProvider::class
        ];
    }

    /**
     * Save the translations into a file in JSON format
     *
     * @param string $path
     * @param TranslationCollection $translations
     */
    protected function printTranslationsToJSON(string $path, TranslationCollection $translations)
    {
        $content = [];

        /** @var Translation $translation */
        foreach ($translations as $translation) {
            $content[$translation->getPath()] = $translation->getTranslation();
        }

        $json = json_encode($content, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);

        file_put_contents($path, $json);
    }
}