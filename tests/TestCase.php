<?php

namespace Kodilab\LaravelI18n\Tests;

use Illuminate\Encryption\Encrypter;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Facades\Schema;
use Kodilab\LaravelI18n\i18n\Translations\Translation;
use Kodilab\LaravelI18n\i18n\Translations\TranslationCollection;
use Kodilab\LaravelI18n\Models\Locale;
use Symfony\Component\Finder\SplFileInfo;

class TestCase extends \Orchestra\Testbench\TestCase
{
    /** @var Filesystem */
    protected $filesystem;

    /** @var string */
    protected $resources_path = __DIR__ . DIRECTORY_SEPARATOR . 'resources';

    /** @var Locale */
    protected $fallback_locale;

    public function __construct($name = null, array $data = [], $dataName = '')
    {
        parent::__construct($name, $data, $dataName);

        $this->filesystem = new Filesystem();
        $this->createResourcesDirectory();
        $this->copyMigrations();
    }

    public function __destruct()
    {
        $this->removeResourcesDirectory();
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->cleanLaravelInstance();

        Schema::defaultStringLength(191);

        $this->loadLaravelMigrations();
        $this->loadMigrationsFrom($this->resources_path . DIRECTORY_SEPARATOR . 'database/migrations');
        $this->withFactories(dirname(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'database/factories');

        $this->app['config']->set('app.key', 'base64:' . base64_encode(
            Encrypter::generateKey($this->app['config']->get('app.cipher'))
        ));

        $this->artisan('migrate')->run();

        $this->artisan('make:locale', [
            '--reference' => factory(Locale::class)->make()->reference,
            '--fallback' => true
        ]);

        $this->fallback_locale = Locale::getFallbackLocale();
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->cleanLaravelInstance();
    }

    protected function getPackageProviders($app)
    {
        return [
            \Kodilab\LaravelI18n\I18nProvider::class
        ];
    }

    /**
     * Clean the Laravel instance
     */
    protected function cleanLaravelInstance()
    {
        $this->removePublishedTranslations();
        $this->removePublishedMigrations();
        $this->removePublishedFactories();
    }

    /**
     * Create test resources directory
     */
    private function createResourcesDirectory()
    {
        if (!is_dir($this->resources_path)) {
            $this->filesystem->makeDirectory($this->resources_path, 0755, true);
        }
    }

    /**
     * Remove test resources directory
     */
    private function removeResourcesDirectory()
    {
        if(is_dir($this->resources_path)) {
            $this->filesystem->deleteDirectory($this->resources_path);
        }
    }

    /**
     * Copy migration files into the resources directory.
     */
    private function copyMigrations()
    {
        $this->clearMigrationsDirectory();
        $this->filesystem->makeDirectory($this->resources_path . DIRECTORY_SEPARATOR . 'database/migrations', 0755, true);

        $migrations = $this->filesystem->files(__DIR__ . '/../src/Commands/Generators/stubs/Migrations');

        /** @var SplFileInfo $migration */
        foreach ($migrations as $index => $migration)
        {
            // removes the .stub from the file
            $filename = preg_replace('/\.stub$/', '', $migration->getFilename());
            $filename = preg_replace('/^[0-9]{4}_[0-9]{2}_[0-9]{2}_[0-9]{6}/', '', $filename);

            $this->filesystem->copy(
                $migration->getRealPath(),
                $this->resources_path . DIRECTORY_SEPARATOR . 'database/migrations/'.date('Y_m_d_His', time() + $index). $filename
            );
        }
    }

    /**
     * Removes migration from the resources directory
     */
    private function clearMigrationsDirectory()
    {
        $this->filesystem->deleteDirectory($this->resources_path . DIRECTORY_SEPARATOR . 'database');
    }

    /**
     * Removes generated translations from the Laravel instance
     */
    private function removePublishedTranslations()
    {
        /** @var SplFileInfo $file */
        foreach ($this->filesystem->files(resource_path('lang')) as $file) {
            if ($file->getExtension() === 'json') {
                $this->filesystem->delete($file->getRealPath());
            }
        }
    }

    /**
     * Removes generated migrations from the Laravel instance
     */
    private function removePublishedMigrations()
    {
        foreach ($this->filesystem->files(database_path('migrations')) as $file) {
            if ($file->getExtension() === 'php') {
                $this->filesystem->delete($file->getRealPath());
            }
        }
    }

    /**
     * Removes generated factories from the Laravel instance
     */
    private function removePublishedFactories()
    {
        foreach ($this->filesystem->files(database_path('factories')) as $file) {
            if ($file->getExtension() === 'php') {
                $this->filesystem->delete($file->getRealPath());
            }
        }
    }

    /**
     * Save the translations into a file in JSON format
     *
     * @param string $path
     * @param TranslationCollection $translations
     */
    protected function printTranslationsToJSON(string $path, TranslationCollection $translations)
    {
        $content = [];

        /** @var Translation $translation */
        foreach ($translations as $translation) {
            $content[$translation->getPath()] = $translation->getTranslation();
        }

        $json = json_encode($content, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);

        file_put_contents($path, $json);
    }
}