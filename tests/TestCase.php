<?php

namespace Kodilab\LaravelI18n\Tests;

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Encryption\Encrypter;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Schema;
use Kodilab\LaravelI18n\Models\Locale;

abstract class TestCase extends \Orchestra\Testbench\TestCase
{
    /** @var Filesystem */
    protected $filesystem;

    /** @var string */
    protected $resources_path = __DIR__ . DIRECTORY_SEPARATOR . 'resources';

    /** @var Locale */
    protected $fallback_locale;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Schema::defaultStringLength(191);

        $this->artisan('migrate')->run();

        $this->withFactories(dirname(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'database/factories');

        $this->app['config']->set('app.key', 'base64:' . base64_encode(
            Encrypter::generateKey($this->app['config']->get('app.cipher'))
        ));

        $this->app['config']->set('i18n.translations_path', $this->resources_path . DIRECTORY_SEPARATOR . 'lang');

        $this->filesystem = new Filesystem();
        $this->createResourcesDirectory();

        $this->fallback_locale = factory(Locale::class)->create(['enabled' => true, 'fallback' => true]);
    }

    protected function tearDown(): void
    {
        $this->removeResourcesDirectory();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    protected function getPackageProviders($app)
    {
        return [
            \Kodilab\LaravelI18n\I18nProvider::class
        ];
    }

    /**
     * Define environment setup.
     *
     * @param \Illuminate\Foundation\Application $app
     * @return void
     */
    protected function getEnvironmentSetUp($app)
    {
        $config = include 'config/config.php';

        $app['config']->set('i18n', $config);
        $app['config']->set('i18n.lang_path', $this->resources_path . DIRECTORY_SEPARATOR . 'lang');
    }

    private function createResourcesDirectory()
    {
        if (!is_dir($this->resources_path)) {
            $this->filesystem->makeDirectory($this->resources_path, 0755, true);
        }
    }

    private function removeResourcesDirectory()
    {
        if(is_dir($this->resources_path)) {
            $this->filesystem->deleteDirectory($this->resources_path);
        }
    }
}