<?php

namespace Kodilab\LaravelI18n\Models;

use Illuminate\Database\Eloquent\Model;
use Kodilab\LaravelI18n\Models\Traits\HelperMethods;

class Locale extends Model
{

    use HelperMethods;

    protected $table;

    protected $fillable = [
        'language',
        'region',
        'name',
        'fallback',
        'laravel_locale',
        'decimals',
        'decimals_punctuation',
        'thousands_separator',
        'currency_symbol',
        'currency_symbol_position',
        'carbon_locale',
        'tz',
    ];

    protected $casts = [
        'decimals' => 'integer',
        'fallback' => 'bool'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::saving(function (Locale $model) {

            $model->language = strtolower($model->language);
            $model->region = !is_null($model->region) ? strtoupper($model->region) : null;
            $model->carbon_locale = !is_null($model->carbon_locale) ? $model->carbon_locale : $model->language;
            $model->laravel_locale = !is_null($model->laravel_locale) ? $model->laravel_locale : $model->reference;

        });

        self::creating(function (Locale $model) {
            if (!is_null(Locale::getLocale($model->reference))) {
                throw new \Exception('Locale ' . $model->reference . ' already exists.');
            }
        });
    }

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        $this->table = config('i18n.tables.locales','locales');
    }

    /**
     * Reference attribute
     *
     * @return string
     */
    public function getReferenceAttribute()
    {
        return Locale::generateReference($this->language, $this->region);
    }

    /**
     * Returns the locale name. If it is null, then reference is returned
     *
     * @return mixed
     */
    public function getNameAttribute()
    {
        return is_null($this->attributes['name']) ? $this->reference : $this->attributes['name'];
    }

    /**
     * Returns whether the locale is the default fallback locale
     *
     * @return mixed
     */
    public function isFallback()
    {
        return $this->fallback;
    }
}
