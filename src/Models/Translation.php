<?php

namespace Kodilab\LaravelI18n\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Cache;
use Kodilab\LaravelFilters\Filterable;
use Kodilab\LaravelI18n\Exceptions\MissingLanguageException;

class Translation extends Model
{

    use Filterable;

    protected $table;

    protected $fillable = ['translation', 'locale_id', 'md5', 'text_id', 'needs_revision'];

    protected $casts = [
        'md5' => 'string',
        'translation' => 'string',
        'locale_id' => 'integer',
        'text_id' => 'integer',
        'needs_revision' => 'boolean'
    ];

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        $this->table = config('i18n.tables.translations');
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::saved(function (Translation $translation) {
            $locale = $translation->locale;

            Cache::forget($locale->reference . '_' . $translation->md5);
        });
    }

    //relationships

    public function locale()
    {
        return $this->belongsTo(Locale::class);
    }

    public function text()
    {
        return $this->belongsTo(Text::class);
    }

    //scope methods

    // methods
    /**
     * Returns whether the translation exists for the locale $locale
     * @param $md5
     * @param Locale $locale
     * @return bool
     */
    public static function existsTranslation($md5, Locale $locale)
    {
        return !is_null(Translation::where('md5', $md5)->where('locale_id', $locale->id)->first());
    }

    /**
     * Stores in database a new translation text $text for the fallback locale.
     *
     * @param string $text
     * @return Translation|null
     * @throws Exceptions\MissingLocaleException
     */
    public static function generateFallbackTranslation(string $text)
    {
        $fallback_locale = Locale::getFallbackLocale();
        $md5 = md5($text);

        if(!self::existsTranslation($md5, $fallback_locale))
        {

            return Translation::create([
                'translation' => $text,
                'md5' => $md5,
                'locale_id' => $fallback_locale->id
            ]);
        }

        return self::getTranslationByText($text, Locale::getFallbackLocale());
    }

    /**
     * Returns the translation of $text in $locale locale. If it doesn't exist, try to create it for the fallback locale
     *
     * @param string $text
     * @param Locale $locale
     * @return Translation|null
     * @throws Exceptions\MissingLocaleException
     */
    public static function getTranslationByText(string $text, Locale $locale)
    {
        $md5 = md5($text);

        /** @var Translation $translation */
        $translation = Translation::where('md5', $md5)->where('locale_id', $locale->id)->first();

        if(!is_null($translation))
        {
            return $translation;
        }

        self::generateFallbackTranslation($text);

        return null;
    }
}
